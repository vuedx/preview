name: CI/CD

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

.checkout: &checkout
  - name: Checkout
    uses: actions/checkout@v2

.node_modules_cache: &node_modules_cache
  - name: Cache node packages
    uses: actions/cache@v2
    env:
      cache-name: pnpm-modules
    with:
      key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}
      restore-keys: |
        ${{ runner.os }}-build-${{ env.cache-name }}-
        ${{ runner.os }}-build-
        ${{ runner.os }}-
      path: |
        ~/.pnpm-store
        ${{ github.workspace }}/.pnpm
.node: &node
  - name: Setup Node
    uses: actions/setup-node@v2
    with:
      node-version: "14"

.pnpm: &pnpm
  - name: Setup PNPM
    uses: pnpm/action-setup@v2.0.1
    with:
      version: "6.2.5"
      run_install: |
        - recursive: true
          args: [--frozen-lockfile]

.setup: &setup
  - *checkout
  - *node_modules_cache
  - *node
  - *pnpm

.download: &download
  - name: Download build artefact
    uses: actions/download-artifact@v2
    with:
      name: build-artefact
      path: "."

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: ${{ !startsWith(github.event.head_commit.message, 'release:') }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    if: "!startsWith(github.event.head_commit.message, 'skip ci')"
    steps:
      - *setup
      - name: Build
        run: pnpm recursive run build
      - name: Upload build artefact
        uses: actions/upload-artifact@v2
        with:
          name: build-artefact
          retention-days: 30
          path: |
            ./packages/*/dist
            ./extension/dist

  unit:
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        node_version: ["12", "14"]
        include:
          - os: ubuntu-latest
            node: "14"
            command: "coverage"
    runs-on: ${{ matrix.os }}
    name: Node ${{ matrix.node_version }} on ${{ matrix.os }}
    continue-on-error: ${{ startsWith(github.event.head_commit.message, 'release:') }}
    steps:
      - *checkout
      - *node_modules_cache
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node_version }}
      - *pnpm
      - *download
      - name: Test
        run: pnpm test
      - name: Collect coverage
        if: matrix.command == 'coverage'
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage/coverage-final.json

  pre-release:
    name: Pre-release
    runs-on: ubuntu-latest
    needs: unit
    concurrency:
      group: pre-release
      cancel-in-progress: true
    steps:
      - *setup
      - *download
      - name: Publish Pre-release Extension
        run: |
          pnpm recursive --filter ./extension run build
          pnpm recursive --filter ./extension run pre-release
        env:
          RELEASE_CHANNEL: pre-release
          VSCODE_MARKETPLACE_TOKEN: ${{ secrets.VSCODE_MARKETPLACE_TOKEN }}
      - name: Publish Pre-release Packages
        run: |
          echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}' > .npmrc
          pnpm recursive --filter ./packages exec -- npm version prerelease --preid=next-$(date +%s)
          pnpm recursive --filter ./packages publish --tag next --access public --no-git-checks
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  check_release:
    name: Check Release
    runs-on: ubuntu-latest
    needs: unit
    if: startsWith(github.event.head_commit.message, 'release:')
    steps:
      - run: echo 'ok'

  release:
    name: Release
    runs-on: ubuntu-latest
    environment:
      name: Production
      url: https://marketplace.visualstudio.com/items?itemName=znck.preview
    needs: check_release
    concurrency:
      group: release
      cancel-in-progress: false
    steps:
      - *setup
      - *download
      - name: Publish Packages
        run: |
          echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}' > .npmrc
          pnpm recursive publish --no-git-checks
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish Extension
        run: |
          pnpm recursive --filter ./extension run release
        env:
          VSCODE_MARKETPLACE_TOKEN: ${{ secrets.VSCODE_MARKETPLACE_TOKEN }}
        continue-on-error: true
      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: false
          files: |
            extension/CHANGELOG.md
            extension/preview.vsix
            packages/*/CHANGELOG.md
